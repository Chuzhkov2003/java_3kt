import java.util.HashMap;
import java.util.Map;

public class FibonacciDigitCount {
    public static void main(String[] args) {
        int i = 100000;
        String fibNumber = computeFibonacci(i);
        int[] digitCounts = countDigits(fibNumber);
        printMostFrequentDigits(digitCounts);
    }

    private static String computeFibonacci(int n) {
        if (n == 0) return "0";
        if (n == 1) return "1";

        String a = "1";
        String b = "1";
        
        for (int i = 2; i <= n; i++) {
            String temp = addStrings(a, b);
            a = b;
            b = temp;
        }
        return b;
    }

    private static String addStrings(String num1, String num2) {
        StringBuilder result = new StringBuilder();
        int carry = 0;
        int i = num1.length() - 1;
        int j = num2.length() - 1;

        while (i >= 0 || j >= 0 || carry > 0) {
            int x = i >= 0 ? num1.charAt(i--) - '0' : 0;
            int y = j >= 0 ? num2.charAt(j--) - '0' : 0;
            int sum = x + y + carry;
            result.append(sum % 10);
            carry = sum / 10;
        }

        return result.reverse().toString();
    }

    private static int[] countDigits(String number) {
        int[] counts = new int[10];
        for (char c : number.toCharArray()) {
            counts[c - '0']++;
        }
        return counts;
    }

    private static void printMostFrequentDigits(int[] counts) {
        int maxCount = 0;
        int maxDigit = 0;

        for (int digit = 0; digit < 10; digit++) {
            if (counts[digit] > maxCount || 
                (counts[digit] == maxCount && digit > maxDigit)) {
                maxCount = counts[digit];
                maxDigit = digit;
            }
        }

        System.out.println("[(" + maxCount + ", " + maxDigit + ")]");
    }
}
